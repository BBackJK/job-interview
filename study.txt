1. 웹 브라우저에서 서버로 요청을 하면 일어나는 일련의 과정을 서술

    URL 입력 -> 우선 자신의 local name server에 해당 URL에 대한 ip주소를 확인
    -> 없으면 root 도메인 서버에게 확인 -> 트리구조의 DNS 체계로부터 ip주소를 얻어내고 HTTP 메시지를 작성
    -> 작성된 HTTP 메시지를 패킷으로 나누어 서버에게 전송(tcp이므로 3-way-handshaking)
    -> 받은 서버는 나누어진 http 패킷을 다시 원래의 HTTP 메시지로 만들어내고
    -> 그에 해당 하는 리소스를 패킷으로 나누어 클라이언트에게 전송
    -> ..

2. 스레드와 프로세스의 차이  

    프로세스는 실행중인 프로그램.
    스레드는 경량화된 프로세스.
    스레드를 사용하면 프로세스에 비해 오버헤드도 적고 병렬성도 높힐 수 있다.

3. stack과 queue

    - stack은 LIFO
    - queue은 FIFO

4. OSI 7 Layer  

    물리계층 / 데이터링크계층 / 네트워크 계층 / 전송 계층 / 세션 계층 / 표현 계층 / 응용 계층

    - 전기적,기계적인 특성을 이용해서 통신 케이블로 데이터를 전송
    - MAC주소를 이용한 통신
    - IP주소를 이용한 통신
    - 양 끝단의 사용자들이 신뢰성있는 데이터를 주고받을 수 있게 한다. 
      (TCP - 신뢰성, 연결지향적 / UDP - 비신뢰적, 비연결지향형)
    - 통신을 관리하기 위한 방법을 제공 (TCP/IP 세션을 만들고 없앰)
    - 캡슐화 / 디캡슐화 / 암호화 등  
    - HTTP 프로토콜, 응용 서비스를 수행  

    (REST API에 대한 osi 7 layer 위치에 대한 의논 - https://stackoverflow.com/questions/29264855/in-which-osi-layer-is-the-rest-api-paradigm)

5. HTTP/HTTPS 차이 

    HTTP - 웹 서버와 사용자의 브라우저 사이에 문서를 전송하기 위한 통신 규약 80번 포트 사용  

    HTTPS - HTTP의 보안성을 강화한 프로토콜 (표현계층에 존재)

6. Javascript 특징

    - prototype

        - 자신을 만들어낸 객체의 원형 (Prototype Link) / 자신을 통해서 만들어질 객체의 원형 (Prototype Object)

    - this

        - 현재 실행 문맥

    - 원시 타입

        - boolean / String / number / null / undefined / symbol 
        - 불변

    - closure(클로저)

        - 내부 함수가 정의될 때 외부 함수의 환경을 기억하고 있는 내부 함수를 말한다.

    - call by value / call by reference

        - call by value는 주어진 값을 복사하여 처리하는 방식
        - call by reference는 매개변수의 참조 주소에 값을 저장하는 방식
        - 결론적으로 javascript는 call by value 방식이고
        - call by reference를 오해하지 않도록 call by sharing이라는 것이 나옴.

    - use strict 란?  

        - 안전한 코딩을 위한 하나의 가이드
        - 선언하지 않고 전역 변수를 만들 수 없다.
        - 조그마한 실수가 버그로 이어질 수 있는 상황에 strict mode를 사용하여 버그 잡아내기
        - es6에서부턴 기본적으로 탑재되어있다.

7. 데이터 구조  

    - hashmap  
        
        - Key와 value를 묶어 하나의 entry로 저장
        - 데이터 저장은 느리지만 많은 양의 데이터를 검색하는데 뛰어나다.

    - arraylist / linked list  

        - array는 index를 통해 직접적으로 접근이 가능하여 검색이 빠르다.
        - 저장이 느리다. (임시 배열을 생성해 데이터를 복사하기 때문)

        - linked list는 각 노드가 이전 노드와 다음 노드의 상태만 알고있어 검색은 느리다. 
        - 저장이 빠르다.

8. 전반적인 프로그래밍 지식

    - MVC  

        - Model , View, Controller 패턴

        - Model ; app이 무엇을 할 것인지 정의. 내부 비즈니스 로직을 처리하기 위한 역할
        - View ; app이 무엇인가를 보여주기 위한 역할.
        - Controller ; Model이 어떻게 처리할 지를 알려주는 역할

    - DAO, DTO, VO

        - DAO ; Data Access Object. db를 사용하여 데이터를 조작하는 기능을 전담하도록 만든 오브젝트
        - DTO ; Data Transfer Object. mvc 계층 간 데이터 교환을 위한 객체
        - VO ; DTO와 같은데 read only 속성을 가진다.

    - REST API

        - 자원의 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든 것을 의미.
        - HTTP URI를 통해 자원을 [명시]하고 HTTP Method를 통해 해당 자원에 대한 CRUD 명령을 적용하는 것을 의미
        - REST API의 설계 의도를 명확하게 지켜주는 것을 'RESTFUL 하다'라고 이야기 한다.

    - override / overload

        - overload ; 같은 이름의 메소드를 여러개 가지면서 매개변수의 유형이나 갯수가 다른 것을 말함.
        - override ; 상위 클래스가 가지고 있는 메소드를 하위 클래스에서 재정의해서 사용

    - 객체지향의 4대 특성

        - 캡슐화 ; 비슷한 역할을 하는 속성과 메소드를 하나의 클래스로 모은것 - 정보 은닉 / api 기능만을 제공
        - 상속 ; 클래스를 재사용 / 생산성이 높고 유지보수가 쉽다
        - 추상화 ; 하위 클래스들에 존재하는 공통적인 메소드를 인터페이스로 정의
        - 다형성 ; 같은 모양의 메소드가 상황에 따라 다르게 동작 / overriding, overloading

9. nodejs 특징

    - 구글의 크롬v8엔진 위에서 구현된 자바스크립트를 위한 런타임 환경

    - V8엔진
    - 논블로킹 비동기 실행 ; 이벤트가 끝날 때까지 기다리지 않고 계속적으로 실행
    - 싱글스레드 ; 이벤트 루프가 하나의 스레드로 돌아간다. 하지만 비동기 작업은 멀티 스레드로 구현

10. cors 이슈

    - 클라이언트와 서버의 origin(도메인이나 포트)이 다를 때 발생하는 이슈
    - cors 허가 혹은 클라이언트와 서버 같은 포트를 사용

11. 데이터베이스 쿼리 속도 향상

    - index를 사용
    - select의 성능을 향상 (B-Tree 인덱스 구조)
    - 대신 insert, update, delete의 성능을 포기

12. orm 장단점

    - 비즈니스로직에 집중할 수 있도록 해준다.
    - 재사용 및 유지보수의 편리성이 증가한다.
    - DBMS에 대한 종속성이 줄어든다.

    - 완벽한 ORM으로만 구현하기가 어려운 쿼리가 존재.
    - 프로시저가 많은 곳은 ORM의 장점을 활용하기 어렵다.

13. docker 기초

    - 컨테이너는 app을 환경에 구애받지않고 실행하는 기술 
    - 서버의 구축과 시작 및 설정이 간편하고 빠르다.
